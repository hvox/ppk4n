#!/usr/bin/env python3

from pathlib import Path

SCRIPT = Path(__file__).resolve().name
PREFIX = f"// This file was generated by ./{SCRIPT}\n\n"

tests_dir = list(Path(__file__).resolve().parent.iterdir())

# Delete old tests
for file in tests_dir:
    if file.name.endswith(".rs") and file.read_text().startswith(PREFIX):
        file.unlink()

# Generate new tests
for source in tests_dir:
    if not source.name.endswith(".ppkn"):
        continue
    rust_test_name = source.stem.replace("-", "_")
    rust_test_path = source.with_suffix(".rs")
    rust_test_path.write_text(
        f"{PREFIX}"
        "use std::process::Command;\n"
        "\n"
        "#[test]\n"
        f"fn {rust_test_name}() "
        '{\n\tlet mut ppkn = Command::new(env!("CARGO_BIN_EXE_ppkn"));\n'
        f'\tppkn.arg("tests/{source.name}");\n'
        "\tlet output = String::from_utf8(ppkn.output().unwrap().stdout).unwrap();\n"
        f'\tlet expected_output = include_str!("{source.name}")\n'
        '\t\t.split_inclusive("\\n")\n'
        '\t\t.map(|line| line.split_once("# ").map(|(_, x)| x).unwrap_or(""))\n'
        "\t\t.collect::<Vec<_>>()\n"
        '\t\t.join("");\n'
        f'\tassert_eq!(output, expected_output, "{source.name}");\n'
        "}\n"
    )
