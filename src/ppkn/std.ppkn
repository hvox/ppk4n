# PPKN STD PROTOTYPE

import String
import string:new_utf8(str) -> String
import string:print(String)

mut HEAP_END: u32 = 32768
mut PRINT_BUFFER: str = ""


fun clone_str(src: u32, size: u32) -> (u32, u32)
	let dst: u32 = malloc(size)
	memory_copy(dst, src, size)
	(dst, size)


fun malloc(size: u32) -> u32
	let ptr: u32 = HEAP_END
	HEAP_END = HEAP_END + size
	ptr


fun free(ptr: u32, size: u32)
	if ptr + size == HEAP_END
		HEAP_END = ptr


fun print(string: str)
	PRINT_BUFFER = PRINT_BUFFER + string


fun str_add(lhs: u32, lhs_size: u32, rhs: u32, rhs_size: u32) -> (u32, u32)
	let result_size = lhs_size + rhs_size
	let result = malloc(result_size)
	memory_copy(result, lhs, lhs_size)
	memory_copy(result + lhs_size, rhs, rhs_size)
	free(lhs, lhs_size)
	free(rhs, rhs_size)
	(result, result_size)


# TODO: rename aboba to string
fun println(aboba: str)
	aboba = PRINT_BUFFER + aboba
	string:print(string:new_utf8(aboba))
	PRINT_BUFFER = ""


fun memory_copy(dst: u32, src: u32, size: u32)
	"intrinsic"

# END
