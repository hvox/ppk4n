#![allow(dead_code)]
use indexmap::{IndexMap, IndexSet};
use super::common::*;

#[derive(Debug, Clone, PartialEq, Default)]
pub struct Bytecode {
    pub types: IndexSet<FuncType>,
    pub imports: IndexMap<Str, Import>,
    pub globals: Vec<GlobalVariable>,
    pub functions: IndexMap<Str, Func>,
    pub data: Vec<u8>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Import {
    pub signature: FuncType,
    pub namespace: Str,
    pub func_name: Str,
}

#[derive(Debug, Clone, PartialEq, Default)]
pub struct Func {
    pub module: Str,
    pub signature: FuncType,
    pub locals: Vec<ValueType>,
    pub code: Vec<Op>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash, Default)]
pub struct FuncType {
    pub parameters: Vec<ValueType>,
    pub results: Vec<ValueType>,
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct GlobalVariable {
    pub typ: ValueType,
    pub mutable: bool,
    pub value: u64,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum BlockType {
    ValueType(ValueType),
    TypeIndex(usize),
    Void,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash, Copy)]
pub enum ValueType {
    I32,
    I64,
    F32,
    F64,
    // TODO: FuncRef,
    ExternRef,
}

#[allow(dead_code)]
#[derive(Debug, Clone, PartialEq)]
pub enum Op {
    Unreachable,
    Nop,
    Block(BlockType, usize),
    Loop(BlockType, usize),
    IfThen(BlockType, usize),
    Else(usize),
    End,
    EndIf,
    Br(usize),
    BrIf(usize),
    JumpTable(Vec<usize>),
    Return,
    CallFunc(usize),
    CallImport(usize),
    CallIndirect(usize),
    Drop,
    Select(ValueType),
    GlobalGet(usize),
    GlobalSet(usize),
    LocalGet(usize),
    LocalSet(usize),
    LocalTee(usize),
    MemorySize,
    MemoryGrow,
    MemoryCopy,
    F32Const(f32),
    F32Load(usize),
    F32Store(usize),
    F32Abs,
    F32Ceil,
    F32Floor,
    F32Nearest,
    F32Neg,
    F32Sqrt,
    F32Trunc,
    F32Copysign,
    F32Add,
    F32Div,
    F32Max,
    F32Min,
    F32Mul,
    F32Sub,
    F32Eq,
    F32Ge,
    F32Gt,
    F32Le,
    F32Lt,
    F32Ne,
    I32Const(i32),
    I32Load(usize),
    I32Store(usize),
    I32And,
    I32Or,
    I32Xor,
    I32Add(usize),
    I32Div(usize),
    I32Mul(usize),
    I32Rem(usize),
    I32Rotl,
    I32Rotr,
    I32Shl(usize),
    I32Shr(usize),
    I32Sub(usize),
    I32Eqz,
    I32Eq,
    I32Ge,
    I32Gt,
    I32Le,
    I32Lt,
    I32Ne,
    U32Const(u32),
    U32Load(usize),
    U32Store(usize),
    U32And,
    U32Or,
    U32Xor,
    U32Add(usize),
    U32Div(usize),
    U32Mul(usize),
    U32Rem(usize),
    U32Rotl,
    U32Rotr,
    U32Shl(usize),
    U32Shr(usize),
    U32Sub(usize),
    U32Eqz,
    U32Eq,
    U32Ge,
    U32Gt,
    U32Le,
    U32Lt,
    U32Ne,
    F64Const(f64),
    F64Load(usize),
    F64Store(usize),
    F64Abs,
    F64Ceil,
    F64Floor,
    F64Nearest,
    F64Neg,
    F64Sqrt,
    F64Trunc,
    F64Copysign,
    F64Add,
    F64Div,
    F64Max,
    F64Min,
    F64Mul,
    F64Sub,
    F64Eq,
    F64Ge,
    F64Gt,
    F64Le,
    F64Lt,
    F64Ne,
    I64Const(i64),
    I64Load(usize),
    I64Store(usize),
    I64And,
    I64Or,
    I64Xor,
    I64Add(usize),
    I64Div(usize),
    I64Mul(usize),
    I64Rem(usize),
    I64Rotl,
    I64Rotr,
    I64Shl(usize),
    I64Shr(usize),
    I64Sub(usize),
    I64Eqz,
    I64Eq,
    I64Ge,
    I64Gt,
    I64Le,
    I64Lt,
    I64Ne,
    U64Const(u64),
    U64Load(usize),
    U64Store(usize),
    U64And,
    U64Or,
    U64Xor,
    U64Add(usize),
    U64Div(usize),
    U64Mul(usize),
    U64Rem(usize),
    U64Rotl,
    U64Rotr,
    U64Shl(usize),
    U64Shr(usize),
    U64Sub(usize),
    U64Eqz,
    U64Eq,
    U64Ge,
    U64Gt,
    U64Le,
    U64Lt,
    U64Ne,
}
